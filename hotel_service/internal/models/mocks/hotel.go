// Code generated by MockGen. DO NOT EDIT.
// Source: hotel_service/internal/models/hotel.go
//
// Generated by this command:
//
//	mockgen -source=hotel_service/internal/models/hotel.go -destination=hotel_service/internal/models/mocks/hotel.go
//

// Package mock_models is a generated GoMock package.
package mock_models

import (
	context "context"
	reflect "reflect"

	models "github.com/WhoDoIt/gofinal/hotel_service/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockHotelModelInterface is a mock of HotelModelInterface interface.
type MockHotelModelInterface struct {
	ctrl     *gomock.Controller
	recorder *MockHotelModelInterfaceMockRecorder
	isgomock struct{}
}

// MockHotelModelInterfaceMockRecorder is the mock recorder for MockHotelModelInterface.
type MockHotelModelInterfaceMockRecorder struct {
	mock *MockHotelModelInterface
}

// NewMockHotelModelInterface creates a new mock instance.
func NewMockHotelModelInterface(ctrl *gomock.Controller) *MockHotelModelInterface {
	mock := &MockHotelModelInterface{ctrl: ctrl}
	mock.recorder = &MockHotelModelInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHotelModelInterface) EXPECT() *MockHotelModelInterfaceMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockHotelModelInterface) Get(ctx context.Context, hotel_id int) (*models.Hotel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, hotel_id)
	ret0, _ := ret[0].(*models.Hotel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockHotelModelInterfaceMockRecorder) Get(ctx, hotel_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockHotelModelInterface)(nil).Get), ctx, hotel_id)
}

// GetAll mocks base method.
func (m *MockHotelModelInterface) GetAll(ctx context.Context) ([]*models.Hotel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]*models.Hotel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockHotelModelInterfaceMockRecorder) GetAll(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockHotelModelInterface)(nil).GetAll), ctx)
}

// GetByOwner mocks base method.
func (m *MockHotelModelInterface) GetByOwner(ctx context.Context, owner_id int) ([]*models.Hotel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByOwner", ctx, owner_id)
	ret0, _ := ret[0].([]*models.Hotel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByOwner indicates an expected call of GetByOwner.
func (mr *MockHotelModelInterfaceMockRecorder) GetByOwner(ctx, owner_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByOwner", reflect.TypeOf((*MockHotelModelInterface)(nil).GetByOwner), ctx, owner_id)
}

// Insert mocks base method.
func (m *MockHotelModelInterface) Insert(ctx context.Context, owner_id int, name, location string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, owner_id, name, location)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockHotelModelInterfaceMockRecorder) Insert(ctx, owner_id, name, location any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockHotelModelInterface)(nil).Insert), ctx, owner_id, name, location)
}
